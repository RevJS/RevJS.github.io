{
    "docs": [
        {
            "location": "/",
            "text": "RevJS - Rev up your data-driven JS app development!\n\u00b6\n\n\nWhat is RevJS?\n\u00b6\n\n\nRevJS is a suite of JavaScript modules designed to speed up development of\ndata-driven JS applications.\n\n\nRevJS allows you to\n\n\n\n\nDefine your data model using \nplain JS Classes\n, and built-in or custom field types\n\n\nDefine custom synchronous or asynchronous \nvalidation logic\n directly on your models\n\n\nMake your models available over the network via an \nautomatically generated GraphQL API\n\n\nQuickly build your \ndata-driven user interface in React\n, using our Higher Order Components\n\n\n\n\nExample\n\u00b6\n\n\nThe below example shows how to create a simple data model with RevJS's \nrev-models\n module:\n\n\n\nimport {\n    AutoNumberField, TextField, SelectField, IntegerField,\n    RelatedModel, ModelManager, InMemoryBackend\n} from 'rev-models';\n\n// Define models\n\nexport class City {\n    @AutoNumberField({ primaryKey: true })\n        id: number;\n    @TextField()\n        name: string;\n\n    constructor(data?: Partial<City>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class Customer {\n    @AutoNumberField({ primaryKey: true })\n        id: number;\n    @TextField()\n        first_name: string;\n    @TextField()\n        last_name: string;\n    @IntegerField()\n        age: number;\n    @SelectField({ selection: [['M', 'Male'], ['F', 'Female']] })\n        gender: string;\n    @RelatedModel({ model: 'City' })\n        city: City;\n\n    constructor(data?: Partial<Customer>) {\n        Object.assign(this, data);\n    }\n}\n\n// Create ModelManager\n\nexport const modelManager = new ModelManager();\nmodelManager.registerBackend('default', new InMemoryBackend());\n\nmodelManager.register(City);\nmodelManager.register(Customer);\n\n\n\n\nResJS is designed for use with \nTypeScript\n, to give you all the\nbenefits of strong typing and intellisense, however it should work with\nstandard ES6+ too. (we're looking for someone interested in creating and\nmaintaining a revjs ES6+ guide!...)\n\n\nComponents\n\u00b6\n\n\nrev-models\n\u00b6\n\n\nDefine your Data Models and Validation, and easily test them out with the in-memory\nstorage provided.\n\n\nrev-api\n\u00b6\n\n\nExpose your data model via an automatically-generated GraphQL API\n\n\nrev-api-client\n\u00b6\n\n\nAccess your server-side models in the browser or on a mobile device,\nusing the same API and validation logic.\n\n\nrev-ui\n\u00b6\n\n\nQuickly build user interfaces with data from your RevJS backend using our\nReact higher-order components.\n\n\nContributing\n\u00b6\n\n\nWe are actively looking to build a team around RevJS. If you are interesting in\ncontributing, fork us on github or drop us a\n\nmail\n!\n\n\nLicense\n\u00b6\n\n\nMIT",
            "title": "Welcome to RevJS!"
        },
        {
            "location": "/#revjs-rev-up-your-data-driven-js-app-development",
            "text": "",
            "title": "RevJS - Rev up your data-driven JS app development!"
        },
        {
            "location": "/#what-is-revjs",
            "text": "RevJS is a suite of JavaScript modules designed to speed up development of\ndata-driven JS applications.  RevJS allows you to   Define your data model using  plain JS Classes , and built-in or custom field types  Define custom synchronous or asynchronous  validation logic  directly on your models  Make your models available over the network via an  automatically generated GraphQL API  Quickly build your  data-driven user interface in React , using our Higher Order Components",
            "title": "What is RevJS?"
        },
        {
            "location": "/#example",
            "text": "The below example shows how to create a simple data model with RevJS's  rev-models  module:  \nimport {\n    AutoNumberField, TextField, SelectField, IntegerField,\n    RelatedModel, ModelManager, InMemoryBackend\n} from 'rev-models';\n\n// Define models\n\nexport class City {\n    @AutoNumberField({ primaryKey: true })\n        id: number;\n    @TextField()\n        name: string;\n\n    constructor(data?: Partial<City>) {\n        Object.assign(this, data);\n    }\n}\n\nexport class Customer {\n    @AutoNumberField({ primaryKey: true })\n        id: number;\n    @TextField()\n        first_name: string;\n    @TextField()\n        last_name: string;\n    @IntegerField()\n        age: number;\n    @SelectField({ selection: [['M', 'Male'], ['F', 'Female']] })\n        gender: string;\n    @RelatedModel({ model: 'City' })\n        city: City;\n\n    constructor(data?: Partial<Customer>) {\n        Object.assign(this, data);\n    }\n}\n\n// Create ModelManager\n\nexport const modelManager = new ModelManager();\nmodelManager.registerBackend('default', new InMemoryBackend());\n\nmodelManager.register(City);\nmodelManager.register(Customer);  ResJS is designed for use with  TypeScript , to give you all the\nbenefits of strong typing and intellisense, however it should work with\nstandard ES6+ too. (we're looking for someone interested in creating and\nmaintaining a revjs ES6+ guide!...)",
            "title": "Example"
        },
        {
            "location": "/#components",
            "text": "",
            "title": "Components"
        },
        {
            "location": "/#rev-models",
            "text": "Define your Data Models and Validation, and easily test them out with the in-memory\nstorage provided.",
            "title": "rev-models"
        },
        {
            "location": "/#rev-api",
            "text": "Expose your data model via an automatically-generated GraphQL API",
            "title": "rev-api"
        },
        {
            "location": "/#rev-api-client",
            "text": "Access your server-side models in the browser or on a mobile device,\nusing the same API and validation logic.",
            "title": "rev-api-client"
        },
        {
            "location": "/#rev-ui",
            "text": "Quickly build user interfaces with data from your RevJS backend using our\nReact higher-order components.",
            "title": "rev-ui"
        },
        {
            "location": "/#contributing",
            "text": "We are actively looking to build a team around RevJS. If you are interesting in\ncontributing, fork us on github or drop us a mail !",
            "title": "Contributing"
        },
        {
            "location": "/#license",
            "text": "MIT",
            "title": "License"
        },
        {
            "location": "/rev-models/",
            "text": "rev-models - RevJS Data Models\n\u00b6\n\n\nThe \nrev-models\n module provides the following:\n\n\n\n\nA set of \nBuilt-in Field Types\n for defining your\n   data models\n\n\nA \nModelManager\n object, which holds the list of\n   your registered models, and provides functions for \ncreate\n, \nread\n,\n   \nupdate\n and \ndelete\n.\n\n\nAn \nin-memory\n storage backend, so you can play with RevJS functions without\n   needing to set up a database.\n\n\n\n\nExample\n\u00b6\n\n\nThe example below registers a simple data class with some basic validation\nrules, creates some data, and reads it back.\n\n\n\nimport {\n    AutoNumberField, TextField, SelectField,\n    ModelManager, InMemoryBackend\n} from 'rev-models';\n\n// Define model\n\nconst POST_STATUS = [\n    ['draft', 'Draft'],\n    ['published', 'Published']\n];\n\nexport class Post {\n    @AutoNumberField({ primaryKey: true })\n        id: number;\n    @TextField({ minLength: 5, maxLength: 100 })\n        title: string;\n    @TextField({ multiLine: true })\n        body: string;\n    @SelectField({ selection: POST_STATUS })\n        status: string;\n\n    constructor(data?: Partial<Post>) {\n        Object.assign(this, data);\n    }\n}\n\n// Create ModelManager\n\nexport const modelManager = new ModelManager();\nmodelManager.registerBackend('default', new InMemoryBackend());\nmodelManager.register(Post);\n\n(async () => {\n\n    // Create some data\n\n    await modelManager.create(new Post({\n        title: 'My First Post',\n        body: 'This is a really cool post made in RevJS',\n        status: 'draft'\n    }));\n\n    await modelManager.create(new Post({\n        title: 'RevJS is awesome!',\n        body: 'I should use it for ALL TEH THINGZZZ!',\n        status: 'published'\n    }));\n\n    // Read it back\n\n    const res = await modelManager.read(Post, {\n        where: {\n            _or: [\n                { title: { _like: '%RevJS%' }},\n                { body: { _like: '%RevJS%' }}\n            ]\n        }\n    });\n\n    console.log(res.results);\n\n})();\n\n\n\n\nBuilt-in Field Types\n\u00b6\n\n\n\n\nTextField\n - Single, or multi-line text field\n\n\nEmailField\n - TextField with e-mail address validation\n\n\nUrlField\n - TextField with URL validation\n\n\nPasswordField\n - Password field\n\n\nNumberField\n - Number entry field (any numeric value)\n\n\nIntegerField\n - Integer entry field\n\n\nAutoNumberField\n - Auto-generated, sequential integer field\n\n\nBooleanField\n - True / false\n\n\nSelectField\n - Single-item selection field\n\n\nMultiSelectField\n - Multiple-item selection field\n\n\nDateField\n - Date-only field\n\n\nTimeField\n - Time-only field\n\n\nDateTimeField\n - Date & Time field\n\n\nRelatedModelField\n - Foreign-key link to a related model\n\n\nRelatedModelListField\n - List of related models\n\n\n\n\nCustom Validation\n\u00b6\n\n\nIn addition to the built-in, configurable validation provided by the\nstandard field types, you can specify your own validation rules directly on your\nmodels, as shown in the example below\n\n\n\nimport {\n    AutoNumberField, TextField, BooleanField,\n    ModelManager, InMemoryBackend, IValidationContext\n} from 'rev-models';\n\n// Define model with some custom validation\n\nexport class Post {\n    @AutoNumberField({ primaryKey: true })\n        id: number;\n    @TextField()\n        title: string;\n    @TextField({ multiLine: true })\n        body: string;\n    @BooleanField()\n        is_published: boolean;\n\n    constructor(data?: Partial<Post>) {\n        Object.assign(this, data);\n    }\n\n    // Define synchronous validation\n    validate(ctx: IValidationContext) {\n        if (this.body.includes('fake news')) {\n            ctx.result.addFieldError('body', 'Body must not contain fake news!');\n        }\n    }\n\n    // Define some asynchronous validation\n    async validateAsync(ctx: IValidationContext) {\n        if (ctx.operation.operationName == 'create') {\n            const duplicates = await ctx.manager.read(Post, {\n                where: {\n                    title: { _like: this.title }\n                }\n            });\n            if (duplicates.meta.totalCount > 0) {\n                ctx.result.addFieldError('title', 'Cannot create post with a duplicate title!');\n            }\n        }\n    }\n}\n\n// Create ModelManager\n\nexport const modelManager = new ModelManager();\nmodelManager.registerBackend('default', new InMemoryBackend());\nmodelManager.register(Post);\n\n// Create some data\n\n(async () => {\n    try {\n\n        // Create a valid post\n        await modelManager.create(new Post({\n            title: 'This is a valid post',\n            body: 'No alternative facts here!',\n            is_published: true\n        }));\n\n        // Try to create a duplicate post...\n        await modelManager.create(new Post({\n            title: 'This is a valid post',\n            body: 'Not really! Its a duplicate, so should cause an error...',\n            is_published: true\n        }));\n\n    }\n    catch (e) {\n        console.error(e.message);\n    }\n})();\n\n\n\n\nThe output of the above code is:\n\n\nValidationError\n * title: Cannot create post with a duplicate title!\n\n\n\n\nFor further information on model validation functions, check out the\n\nIModel\n interface\n\n\nModelManager functions\n\u00b6\n\n\nThe RevJS \nModelManager\n has the\nfollowing main functions:\n\n\n\n\nregisterBackend()\n -\n   used to configure the database or API where your models are stored\n\n\nread()\n - read models from\n   your backend\n\n\ncreate()\n - store a new\n   model in your backend\n\n\nupdate()\n - update a model\n   already stored in the backend\n\n\nremove()\n - remove a model\n   that is currently stored in the backend\n\n\n\n\nSupported Backends\n\u00b6\n\n\nThe following back-ends are currently supported:\n\n\n\n\nInMemoryBackend\n - stores your\n   model data in-memory. Ideal for initial development and automated testing.\n\n\nModelApiBackend\n - designed for use in the browser or mobile app.\n   Uses the API created by \nrev-api\n to store and retrieve your models.\n\n\nMongoDBBackend\n - stores and retrieves your data from MongoDB\n\n\n\n\nWe have defined a standard \nIBackend\n\ninterface, as well as a\n\nStandard Test Suite\n\nto aid with new backend development, and are keen to accept any contributions\nfrom the community!\n\n\nContributing\n\u00b6\n\n\nWe are actively looking to build a team around RevJS. If you are interesting in\ncontributing, fork us on github or drop us a\n\nmail\n!",
            "title": "rev-models"
        },
        {
            "location": "/rev-models/#rev-models-revjs-data-models",
            "text": "The  rev-models  module provides the following:   A set of  Built-in Field Types  for defining your\n   data models  A  ModelManager  object, which holds the list of\n   your registered models, and provides functions for  create ,  read ,\n    update  and  delete .  An  in-memory  storage backend, so you can play with RevJS functions without\n   needing to set up a database.",
            "title": "rev-models - RevJS Data Models"
        },
        {
            "location": "/rev-models/#example",
            "text": "The example below registers a simple data class with some basic validation\nrules, creates some data, and reads it back.  \nimport {\n    AutoNumberField, TextField, SelectField,\n    ModelManager, InMemoryBackend\n} from 'rev-models';\n\n// Define model\n\nconst POST_STATUS = [\n    ['draft', 'Draft'],\n    ['published', 'Published']\n];\n\nexport class Post {\n    @AutoNumberField({ primaryKey: true })\n        id: number;\n    @TextField({ minLength: 5, maxLength: 100 })\n        title: string;\n    @TextField({ multiLine: true })\n        body: string;\n    @SelectField({ selection: POST_STATUS })\n        status: string;\n\n    constructor(data?: Partial<Post>) {\n        Object.assign(this, data);\n    }\n}\n\n// Create ModelManager\n\nexport const modelManager = new ModelManager();\nmodelManager.registerBackend('default', new InMemoryBackend());\nmodelManager.register(Post);\n\n(async () => {\n\n    // Create some data\n\n    await modelManager.create(new Post({\n        title: 'My First Post',\n        body: 'This is a really cool post made in RevJS',\n        status: 'draft'\n    }));\n\n    await modelManager.create(new Post({\n        title: 'RevJS is awesome!',\n        body: 'I should use it for ALL TEH THINGZZZ!',\n        status: 'published'\n    }));\n\n    // Read it back\n\n    const res = await modelManager.read(Post, {\n        where: {\n            _or: [\n                { title: { _like: '%RevJS%' }},\n                { body: { _like: '%RevJS%' }}\n            ]\n        }\n    });\n\n    console.log(res.results);\n\n})();",
            "title": "Example"
        },
        {
            "location": "/rev-models/#built-in-field-types",
            "text": "TextField  - Single, or multi-line text field  EmailField  - TextField with e-mail address validation  UrlField  - TextField with URL validation  PasswordField  - Password field  NumberField  - Number entry field (any numeric value)  IntegerField  - Integer entry field  AutoNumberField  - Auto-generated, sequential integer field  BooleanField  - True / false  SelectField  - Single-item selection field  MultiSelectField  - Multiple-item selection field  DateField  - Date-only field  TimeField  - Time-only field  DateTimeField  - Date & Time field  RelatedModelField  - Foreign-key link to a related model  RelatedModelListField  - List of related models",
            "title": "Built-in Field Types"
        },
        {
            "location": "/rev-models/#custom-validation",
            "text": "In addition to the built-in, configurable validation provided by the\nstandard field types, you can specify your own validation rules directly on your\nmodels, as shown in the example below  \nimport {\n    AutoNumberField, TextField, BooleanField,\n    ModelManager, InMemoryBackend, IValidationContext\n} from 'rev-models';\n\n// Define model with some custom validation\n\nexport class Post {\n    @AutoNumberField({ primaryKey: true })\n        id: number;\n    @TextField()\n        title: string;\n    @TextField({ multiLine: true })\n        body: string;\n    @BooleanField()\n        is_published: boolean;\n\n    constructor(data?: Partial<Post>) {\n        Object.assign(this, data);\n    }\n\n    // Define synchronous validation\n    validate(ctx: IValidationContext) {\n        if (this.body.includes('fake news')) {\n            ctx.result.addFieldError('body', 'Body must not contain fake news!');\n        }\n    }\n\n    // Define some asynchronous validation\n    async validateAsync(ctx: IValidationContext) {\n        if (ctx.operation.operationName == 'create') {\n            const duplicates = await ctx.manager.read(Post, {\n                where: {\n                    title: { _like: this.title }\n                }\n            });\n            if (duplicates.meta.totalCount > 0) {\n                ctx.result.addFieldError('title', 'Cannot create post with a duplicate title!');\n            }\n        }\n    }\n}\n\n// Create ModelManager\n\nexport const modelManager = new ModelManager();\nmodelManager.registerBackend('default', new InMemoryBackend());\nmodelManager.register(Post);\n\n// Create some data\n\n(async () => {\n    try {\n\n        // Create a valid post\n        await modelManager.create(new Post({\n            title: 'This is a valid post',\n            body: 'No alternative facts here!',\n            is_published: true\n        }));\n\n        // Try to create a duplicate post...\n        await modelManager.create(new Post({\n            title: 'This is a valid post',\n            body: 'Not really! Its a duplicate, so should cause an error...',\n            is_published: true\n        }));\n\n    }\n    catch (e) {\n        console.error(e.message);\n    }\n})();  The output of the above code is:  ValidationError\n * title: Cannot create post with a duplicate title!  For further information on model validation functions, check out the IModel  interface",
            "title": "Custom Validation"
        },
        {
            "location": "/rev-models/#modelmanager-functions",
            "text": "The RevJS  ModelManager  has the\nfollowing main functions:   registerBackend()  -\n   used to configure the database or API where your models are stored  read()  - read models from\n   your backend  create()  - store a new\n   model in your backend  update()  - update a model\n   already stored in the backend  remove()  - remove a model\n   that is currently stored in the backend",
            "title": "ModelManager functions"
        },
        {
            "location": "/rev-models/#supported-backends",
            "text": "The following back-ends are currently supported:   InMemoryBackend  - stores your\n   model data in-memory. Ideal for initial development and automated testing.  ModelApiBackend  - designed for use in the browser or mobile app.\n   Uses the API created by  rev-api  to store and retrieve your models.  MongoDBBackend  - stores and retrieves your data from MongoDB   We have defined a standard  IBackend \ninterface, as well as a Standard Test Suite \nto aid with new backend development, and are keen to accept any contributions\nfrom the community!",
            "title": "Supported Backends"
        },
        {
            "location": "/rev-models/#contributing",
            "text": "We are actively looking to build a team around RevJS. If you are interesting in\ncontributing, fork us on github or drop us a mail !",
            "title": "Contributing"
        },
        {
            "location": "/rev-api/",
            "text": "rev-api\n\u00b6\n\n\n// TODO\n\n\nContributing\n\u00b6\n\n\nWe are actively looking to build a team around RevJS. If you are interesting in\ncontributing, fork us on github or drop us a\n\nmail\n!",
            "title": "rev-api"
        },
        {
            "location": "/rev-api/#rev-api",
            "text": "// TODO",
            "title": "rev-api"
        },
        {
            "location": "/rev-api/#contributing",
            "text": "We are actively looking to build a team around RevJS. If you are interesting in\ncontributing, fork us on github or drop us a mail !",
            "title": "Contributing"
        },
        {
            "location": "/rev-api-client/",
            "text": "rev-api-client\n\u00b6\n\n\n// TODO\n\n\nContributing\n\u00b6\n\n\nWe are actively looking to build a team around RevJS. If you are interesting in\ncontributing, fork us on github or drop us a\n\nmail\n!",
            "title": "rev-api-client"
        },
        {
            "location": "/rev-api-client/#rev-api-client",
            "text": "// TODO",
            "title": "rev-api-client"
        },
        {
            "location": "/rev-api-client/#contributing",
            "text": "We are actively looking to build a team around RevJS. If you are interesting in\ncontributing, fork us on github or drop us a mail !",
            "title": "Contributing"
        },
        {
            "location": "/rev-ui/",
            "text": "rev-ui\n\u00b6\n\n\n// TODO\n\n\nContributing\n\u00b6\n\n\nWe are actively looking to build a team around RevJS. If you are interesting in\ncontributing, fork us on github or drop us a\n\nmail\n!",
            "title": "rev-ui"
        },
        {
            "location": "/rev-ui/#rev-ui",
            "text": "// TODO",
            "title": "rev-ui"
        },
        {
            "location": "/rev-ui/#contributing",
            "text": "We are actively looking to build a team around RevJS. If you are interesting in\ncontributing, fork us on github or drop us a mail !",
            "title": "Contributing"
        }
    ]
}